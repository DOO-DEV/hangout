basePath: /api/v1
definitions:
  dbparam.GroupConnection:
    properties:
      created_at:
        type: string
      from:
        type: string
    type: object
  param.AcceptGroupConnectionRequest:
    properties:
      group_id:
        type: string
    type: object
  param.AcceptGroupConnectionResponse:
    type: object
  param.ChatMessageRequest:
    properties:
      content:
        type: string
    type: object
  param.ChatMessageResponse:
    type: object
  param.ChatMsg:
    properties:
      content:
        type: string
      timestamp:
        type: string
    type: object
  param.CreateGroupRequest:
    properties:
      name:
        type: string
    type: object
  param.CreteGroupResponse:
    properties:
      name:
        type: string
    type: object
  param.DeleteProfileImageRequest:
    properties:
      image_id:
        type: string
    type: object
  param.DeleteProfileImageResponse:
    type: object
  param.GetAllProfileImagesRequest:
    type: object
  param.GetAllProfileImagesResponse:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  param.GetChatHistoryRequest:
    type: object
  param.GetChatHistoryResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/param.ChatMsg'
        type: array
      receiver:
        type: string
      sender:
        type: string
    type: object
  param.GetMyGroupRequest:
    type: object
  param.GetMyGroupResponse:
    properties:
      group:
        type: string
      members:
        items:
          $ref: '#/definitions/param.MemberInfo'
        type: array
    type: object
  param.GetPrimaryProfileImageRequest:
    type: object
  param.GetPrimaryProfileImageResponse:
    properties:
      url:
        type: string
    type: object
  param.GetUserChatResponse:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  param.GetUserChatsRequest:
    type: object
  param.GroupConnectionRequest:
    properties:
      group_id:
        type: string
    type: object
  param.GroupConnectionResponse:
    type: object
  param.JoinRequest:
    properties:
      group_id:
        type: string
    type: object
  param.JoinResponse:
    type: object
  param.ListJoinRequest:
    type: object
  param.ListJoinRequestsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/param.PendingJoinReq'
        type: array
    type: object
  param.ListJoinRequestsToMyGroupRequest:
    type: object
  param.ListJoinRequestsToMyGroupResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/param.MemberRequestToMyGroup'
        type: array
    type: object
  param.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  param.LoginResponse:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
  param.MemberInfo:
    properties:
      joined_at:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  param.MemberRequestToMyGroup:
    properties:
      sent_at:
        type: string
      user:
        type: string
    type: object
  param.MyGroupConnectionsRequest:
    type: object
  param.MyGroupConnectionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dbparam.GroupConnection'
        type: array
    type: object
  param.PendingJoinReq:
    properties:
      group:
        type: string
      sent_at:
        type: string
    type: object
  param.RegisterRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  param.RegisterResponse:
    type: object
  param.SaveProfileImageRequest:
    type: object
  param.SaveProfileImageResponse:
    properties:
      image_url:
        type: string
    type: object
  param.SetImageAsPrimaryRequest:
    properties:
      image_id:
        type: string
    type: object
  param.SetImageAsPrimaryResponse:
    type: object
host: localhost:3000
info:
  contact: {}
  description: Enter the token with the `Bearer ` prefix, e.g. `Bearer jwt_token_string`.
  license:
    name: Apache 2.0
  termsOfService: http://swagger.io/terms/
  title: Hangout
  version: "1.1"
paths:
  /chat:
    get:
      consumes:
      - application/json
      description: List all user chats
      parameters:
      - description: Chat message
        in: body
        name: privatechat
        schema:
          $ref: '#/definitions/param.GetUserChatsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.GetUserChatResponse'
      security:
      - auth: []
      summary: List chats
      tags:
      - privatechat
  /chat/{id}:
    get:
      consumes:
      - application/json
      description: History of privatechat
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Chat message
        in: body
        name: privatechat
        schema:
          $ref: '#/definitions/param.GetChatHistoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.GetChatHistoryResponse'
      security:
      - auth: []
      summary: Get privatechat history
      tags:
      - privatechat
    post:
      consumes:
      - application/json
      description: Chat with other users
      parameters:
      - description: user id to privatechat with
        in: path
        name: id
        required: true
        type: string
      - description: Chat message
        in: body
        name: privatechat
        required: true
        schema:
          $ref: '#/definitions/param.ChatMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/param.ChatMessageResponse'
      security:
      - auth: []
      summary: Chat with users
      tags:
      - privatechat
  /connection_requests:
    get:
      consumes:
      - application/json
      description: Admins can see list of all other groups that connect with its group
      parameters:
      - description: List connections
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.MyGroupConnectionsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/param.MyGroupConnectionsResponse'
      security:
      - auth: []
      summary: List all group connections
      tags:
      - group
    post:
      consumes:
      - application/json
      description: Admins can request to each other to connect their groups
      parameters:
      - description: Connect group
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.GroupConnectionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/param.GroupConnectionResponse'
      security:
      - auth: []
      summary: Connect groups
      tags:
      - group
  /connection_requests/accept:
    get:
      consumes:
      - application/json
      description: Admins can accept request from other group to join with its group
      parameters:
      - description: Accept group connections
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.AcceptGroupConnectionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/param.AcceptGroupConnectionResponse'
      security:
      - auth: []
      summary: Accept group connection request
      tags:
      - group
  /groups:
    get:
      consumes:
      - application/json
      description: User can list all existence group
      parameters:
      - description: List Groups
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.GetMyGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.GetMyGroupResponse'
      security:
      - auth: []
      summary: Show all group
      tags:
      - group
    post:
      consumes:
      - application/json
      description: Create a group for a user
      parameters:
      - description: Create group
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/param.CreteGroupResponse'
      security:
      - auth: []
      summary: Create a group
      tags:
      - group
  /groups/my:
    get:
      consumes:
      - application/json
      description: Get created group info
      parameters:
      - description: My Group Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.GetMyGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.GetMyGroupResponse'
      security:
      - auth: []
      summary: Get my group
      tags:
      - group
  /join_requests:
    get:
      consumes:
      - application/json
      description: Admin can see list of join requests to it's group
      parameters:
      - description: Accept
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.ListJoinRequestsToMyGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.ListJoinRequestsToMyGroupResponse'
      security:
      - auth: []
      summary: List admin join requests
      tags:
      - group
    post:
      consumes:
      - application/json
      description: User can join a group
      parameters:
      - description: Join to group
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.JoinRequest'
      produces:
      - application/json
      responses:
        "2001":
          description: ""
          schema:
            $ref: '#/definitions/param.JoinResponse'
      security:
      - auth: []
      summary: Join group
      tags:
      - group
  /login:
    post:
      consumes:
      - application/json
      description: Login to user account
      parameters:
      - description: Login User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/param.LoginResponse'
      summary: Login account
      tags:
      - auth
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new account for new user
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/param.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/param.RegisterResponse'
      summary: Register account
      tags:
      - auth
  /user/profile_img:
    delete:
      consumes:
      - application/json
      description: User can delete a certain profile image
      parameters:
      - description: ImageID
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/param.DeleteProfileImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.DeleteProfileImageResponse'
      security:
      - auth: []
      summary: Delete on profile image
      tags:
      - profile-image
    get:
      consumes:
      - application/json
      description: User can get all uploaded image for it's account
      parameters:
      - description: Request object
        in: body
        name: image
        schema:
          $ref: '#/definitions/param.GetAllProfileImagesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.GetAllProfileImagesResponse'
      security:
      - auth: []
      summary: Get all profile images
      tags:
      - profile-image
    post:
      consumes:
      - application/json
      description: User can set profile image
      parameters:
      - description: The image to upload
        in: formData
        name: image
        required: true
        type: file
      - description: Request object
        in: body
        name: image
        schema:
          $ref: '#/definitions/param.SaveProfileImageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/param.SaveProfileImageResponse'
      security:
      - auth: []
      summary: Upload profile image
      tags:
      - profile-image
  /user/profile_img/primary:
    get:
      consumes:
      - application/json
      description: User can get it's newly(primary) image uploaded
      parameters:
      - description: Request object
        in: body
        name: image
        schema:
          $ref: '#/definitions/param.GetPrimaryProfileImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.GetPrimaryProfileImageResponse'
      security:
      - auth: []
      summary: Get primary profile image
      tags:
      - profile-image
    patch:
      consumes:
      - application/json
      description: User can change the primary image with this route
      parameters:
      - description: imageID
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/param.SetImageAsPrimaryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.SetImageAsPrimaryResponse'
      security:
      - auth: []
      summary: Set an image as primary
      tags:
      - profile-image
schemes:
- http
swagger: "2.0"
